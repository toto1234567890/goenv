// Code generated by capnpc-go. DO NOT EDIT.

package Notifie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type NotifieMsg capnp.Struct

// NotifieMsg_TypeID is the unique identifier for the type NotifieMsg.
const NotifieMsg_TypeID = 0x868758ad9f398b4f

func NewNotifieMsg(s *capnp.Segment) (NotifieMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NotifieMsg(st), err
}

func NewRootNotifieMsg(s *capnp.Segment) (NotifieMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return NotifieMsg(st), err
}

func ReadRootNotifieMsg(msg *capnp.Message) (NotifieMsg, error) {
	root, err := msg.Root()
	return NotifieMsg(root.Struct()), err
}

func (s NotifieMsg) String() string {
	str, _ := text.Marshal(0x868758ad9f398b4f, capnp.Struct(s))
	return str
}

func (s NotifieMsg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NotifieMsg) DecodeFromPtr(p capnp.Ptr) NotifieMsg {
	return NotifieMsg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NotifieMsg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NotifieMsg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NotifieMsg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NotifieMsg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NotifieMsg) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NotifieMsg) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NotifieMsg) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NotifieMsg) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NotifieMsg) Attachment() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NotifieMsg) HasAttachment() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NotifieMsg) AttachmentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NotifieMsg) SetAttachment(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NotifieMsg) Tags() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	if err != nil {
		return capnp.TextList{}, err
	}
	l, err := p.ListDefault(x_cd0e7dad96752db7[0:40])
	return capnp.TextList(l), err
}

func (s NotifieMsg) HasTags() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NotifieMsg) SetTags(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTags sets the tags field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s NotifieMsg) NewTags(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// NotifieMsg_List is a list of NotifieMsg.
type NotifieMsg_List = capnp.StructList[NotifieMsg]

// NewNotifieMsg creates a new list of NotifieMsg.
func NewNotifieMsg_List(s *capnp.Segment, sz int32) (NotifieMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[NotifieMsg](l), err
}

// NotifieMsg_Future is a wrapper for a NotifieMsg promised by a client call.
type NotifieMsg_Future struct{ *capnp.Future }

func (f NotifieMsg_Future) Struct() (NotifieMsg, error) {
	p, err := f.Future.Ptr()
	return NotifieMsg(p.Struct()), err
}

const schema_cd0e7dad96752db7 = "x\xda,\xc9\xbdJ\x03A\x14\xc5\xf1s\xeel\x14d" +
	"\x1d\xbd\xb0O!D\xb0\xd4*\x08\x82\x8a\x1f;\xa0 " +
	"vC\x18\xd7@v\x0d\xceXX\x88\x9d\x16\xf6\xb6>" +
	"A\xb0\xb4\xb4\xb2\x11R\xf8D#\xd1T\x87\xf3\xff\xad" +
	"\xdf\x0f\x8a\xad\xd5OB\\\xd5[\xca\xa7/\xdbo\xd3" +
	"\x8b\xe7'\xa8e\xfe\xe8\xdf\xbdN\x1f\xec\x0c=\xb3\x0c" +
	"\xe8\xd7\xb7\xfe\xccw\xf6\x8e~\xeen\xd2\xe8j\x146" +
	"e\xe8'\xddd\xe7\xe4\xff\x1e\xc7\x06\xa8IW\x9a\x02" +
	"(\x08\xe8\xde.\xe0\x06\x86\xeeH\xa8dE\x92zp" +
	"\x09\xb8}Cw&T\x91\x8aB\xea\xf9\x06\xe0jC" +
	"7\x16>\xb6!F\xdf\x04\x96\x10\x96`\xf6)\xf9\xe1" +
	"u\x1b`\xba\xb4\x88P\xae\x00k\xc97\x91\x16\xac\x0d" +
	"\xff\xc0\xce\xc1*\x0fs\x0a\xe3\xd0\xdc\xfa\x16\xc0o\x00" +
	"\x00\x00\xff\xffgH1\x83"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_cd0e7dad96752db7,
		Nodes: []uint64{
			0x868758ad9f398b4f,
		},
		Compressed: true,
	})
}

var x_cd0e7dad96752db7 = []byte{
	0, 0, 0, 0, 4, 0, 0, 0,
	1, 0, 0, 0, 14, 0, 0, 0,
	1, 0, 0, 0, 74, 0, 0, 0,
	116, 101, 108, 101, 103, 114, 97, 109,
	0, 0, 0, 0, 0, 0, 0, 0,
}
