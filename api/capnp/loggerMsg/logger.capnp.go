// Code generated by capnpc-go. DO NOT EDIT.

package MyLogger

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Level uint16

// Level_TypeID is the unique identifier for the type Level.
const Level_TypeID = 0xd8c4553d6f87c52b

// Values of Level.
const (
	Level_notset   Level = 0
	Level_debug    Level = 1
	Level_stream   Level = 2
	Level_info     Level = 3
	Level_logon    Level = 4
	Level_logout   Level = 5
	Level_trade    Level = 6
	Level_schedule Level = 7
	Level_report   Level = 8
	Level_warning  Level = 9
	Level_error    Level = 10
	Level_critical Level = 11
)

// String returns the enum's constant name.
func (c Level) String() string {
	switch c {
	case Level_notset:
		return "notset"
	case Level_debug:
		return "debug"
	case Level_stream:
		return "stream"
	case Level_info:
		return "info"
	case Level_logon:
		return "logon"
	case Level_logout:
		return "logout"
	case Level_trade:
		return "trade"
	case Level_schedule:
		return "schedule"
	case Level_report:
		return "report"
	case Level_warning:
		return "warning"
	case Level_error:
		return "error"
	case Level_critical:
		return "critical"

	default:
		return ""
	}
}

// LevelFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LevelFromString(c string) Level {
	switch c {
	case "notset":
		return Level_notset
	case "debug":
		return Level_debug
	case "stream":
		return Level_stream
	case "info":
		return Level_info
	case "logon":
		return Level_logon
	case "logout":
		return Level_logout
	case "trade":
		return Level_trade
	case "schedule":
		return Level_schedule
	case "report":
		return Level_report
	case "warning":
		return Level_warning
	case "error":
		return Level_error
	case "critical":
		return Level_critical

	default:
		return 0
	}
}

type Level_List = capnp.EnumList[Level]

func NewLevel_List(s *capnp.Segment, sz int32) (Level_List, error) {
	return capnp.NewEnumList[Level](s, sz)
}

type LoggerMsg capnp.Struct

// LoggerMsg_TypeID is the unique identifier for the type LoggerMsg.
const LoggerMsg_TypeID = 0xa92baada7e157478

func NewLoggerMsg(s *capnp.Segment) (LoggerMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15})
	return LoggerMsg(st), err
}

func NewRootLoggerMsg(s *capnp.Segment) (LoggerMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15})
	return LoggerMsg(st), err
}

func ReadRootLoggerMsg(msg *capnp.Message) (LoggerMsg, error) {
	root, err := msg.Root()
	return LoggerMsg(root.Struct()), err
}

func (s LoggerMsg) String() string {
	str, _ := text.Marshal(0xa92baada7e157478, capnp.Struct(s))
	return str
}

func (s LoggerMsg) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LoggerMsg) DecodeFromPtr(p capnp.Ptr) LoggerMsg {
	return LoggerMsg(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LoggerMsg) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LoggerMsg) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LoggerMsg) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LoggerMsg) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LoggerMsg) Timestamp() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LoggerMsg) HasTimestamp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LoggerMsg) TimestampBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetTimestamp(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LoggerMsg) Hostname() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LoggerMsg) HasHostname() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LoggerMsg) HostnameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetHostname(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s LoggerMsg) LoggerName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s LoggerMsg) HasLoggerName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LoggerMsg) LoggerNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetLoggerName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s LoggerMsg) Module() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s LoggerMsg) HasModule() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LoggerMsg) ModuleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetModule(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s LoggerMsg) Level() Level {
	return Level(capnp.Struct(s).Uint16(0))
}

func (s LoggerMsg) SetLevel(v Level) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s LoggerMsg) Filename() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s LoggerMsg) HasFilename() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LoggerMsg) FilenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetFilename(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s LoggerMsg) FunctionName() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s LoggerMsg) HasFunctionName() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LoggerMsg) FunctionNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetFunctionName(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s LoggerMsg) LineNumber() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s LoggerMsg) HasLineNumber() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s LoggerMsg) LineNumberBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetLineNumber(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s LoggerMsg) Message_() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s LoggerMsg) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s LoggerMsg) Message_Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetMessage_(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s LoggerMsg) PathName() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s LoggerMsg) HasPathName() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s LoggerMsg) PathNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetPathName(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s LoggerMsg) ProcessId() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s LoggerMsg) HasProcessId() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s LoggerMsg) ProcessIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetProcessId(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s LoggerMsg) ProcessName() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s LoggerMsg) HasProcessName() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s LoggerMsg) ProcessNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetProcessName(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s LoggerMsg) ThreadId() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s LoggerMsg) HasThreadId() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s LoggerMsg) ThreadIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetThreadId(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s LoggerMsg) ThreadName() (string, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.Text(), err
}

func (s LoggerMsg) HasThreadName() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s LoggerMsg) ThreadNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetThreadName(v string) error {
	return capnp.Struct(s).SetText(12, v)
}

func (s LoggerMsg) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return p.Text(), err
}

func (s LoggerMsg) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s LoggerMsg) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(13, v)
}

func (s LoggerMsg) StackTrace() (string, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return p.Text(), err
}

func (s LoggerMsg) HasStackTrace() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s LoggerMsg) StackTraceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return p.TextBytes(), err
}

func (s LoggerMsg) SetStackTrace(v string) error {
	return capnp.Struct(s).SetText(14, v)
}

// LoggerMsg_List is a list of LoggerMsg.
type LoggerMsg_List = capnp.StructList[LoggerMsg]

// NewLoggerMsg creates a new list of LoggerMsg.
func NewLoggerMsg_List(s *capnp.Segment, sz int32) (LoggerMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 15}, sz)
	return capnp.StructList[LoggerMsg](l), err
}

// LoggerMsg_Future is a wrapper for a LoggerMsg promised by a client call.
type LoggerMsg_Future struct{ *capnp.Future }

func (f LoggerMsg_Future) Struct() (LoggerMsg, error) {
	p, err := f.Future.Ptr()
	return LoggerMsg(p.Struct()), err
}

const schema_fc867d59c4f2e15c = "x\xda\\\xd2\xcf\x8b\x1cE\x14\x07\xf0\xef\xab\xee\x99\x9e" +
	"\x9f;\x16U\xc1\x1c\x94\xf1\xa6\x18\x94$\xe2e!L" +
	"\x08x\xc8b\x06'\xad\x87\x88\x97\xde\x9e\xda\x9e\xd6\xfe" +
	"1V\xf7\xacz\xd0\x90\x8b\xc1\x7f\xc1\xff@OzS" +
	"\xf1\xa00\x82\x82\x81]PX\xc5\x83\x0b{\x11VP" +
	"qAa\xa5\xe5\xcd\xb2;\x9b\xb9\x0c\xbc\xcf\xbc\xfaV" +
	"W\xd5\xbb|\x8f\xae\xbbW\xba\x8f\x0a\x88\xd1\xc5Z\xbd" +
	"z\xbb\xbc\xf0\xde\xcf\x1f_\xfa\x08\xa3.Q\xf5\xda\xfe" +
	"_\xf3;\xef\xbe\x7f\x8cZ\xcf\x03\xe4\x9f_\xc8\x7f=" +
	"\xe0\xca\xd1}\x07T]\xfa\xe6~~\xed\x95\xf9\x1ed" +
	"W,;A\xea\x81\xfb\xa1\xfa\xd1\xf5\x80\xe7v\xdd'" +
	"\x09\xcfTI\x1eE\xc6>\x1bR0\xcd\xa6\xeb/\xe6" +
	"\xd1 2\xf6V\x11\xbdD4\xba\xee\xb8\x80K\x80\xfa" +
	"\x94n\x03\xfe'\xe4\x90\xff%\x09\x92D\x9a\xd8?\xa7" +
	"\x0d\xc0\xff\x8c}\xce.\x84&\x01\xa8\xaf\xe9U\xc0\xff" +
	"\x8a\xfd{v\xc7\xd1\xe4\x00\xea;Z\x07\xfc9\xfb\x0e" +
	"\x09\"W\x93\x0b\xa8\x07t\x15\xf0\xbfe\xfe\x81\xdbk" +
	"\xae\xa6\x1a\xa0v\x17\xf1;\xec\xbf\xb0\xd7k\x9a\xea\x80" +
	"\xfa\x89^\x07\xfc=\xf6\x03v\xaf\xae\xc9\x03\xd4\xfeb" +
	"\xdb_\xd9\x0f\xd9\x1b\x9e\xa6\x06\xa0~\xa3\x1b\x80\x7f\xc0" +
	"\xfe\x07{\xb3\xa1\xa9\x09\xa8\xdf\x17\xf9\x87\xec\xff\xb0\xb7" +
	"\x9a\x9aZ\x80:Z\x1c\xf7or\xe8\xb6\x10$\xdb-" +
	"Mm@\xfdG\x9b\x80\x7f\xcc\xed\x0d\xf6N[S\x07" +
	"P5\xc11\xaep\xc8\x7f\x84\xbd\xdb\xd1\xd4\x05TW" +
	"\xf0\xe7t\xd8/\xb2\xafu5\xad\x01\xea\x82\xe0\x1c\xcd" +
	"\xfe\x04{oMS\x0fP\x8f/\xfa\x1fc\x7fJ\x08" +
	"\xaa\xca85E\x19\xa4\xa0)u \xa8\x03\xaa&y" +
	"QfAj\x00\x9c\xd9\xc9\x1b\x0e\x038\xa99\xc5A" +
	"\x9a\x8fg\xc9Y\xd9O\xcc\xb6I\xa8\xb7\x9c\x0c\x10\xf5" +
	"@\xd5V\x9c\x98\xd5\xbc\xadY\x16\x96q\x9e\xa17\x0c" +
	"\x96\x89U\x12gf8K7\xe1\x18{\x8awSS" +
	"\x14A\xb4l\x9a\x06\xe5d\xb8\x927\xb5yh\x8a\xe2" +
	"&h\xbcjCx\xe7\xb7('\xd6\x04\xe3\x9b\xe3\xf3" +
	"\xabO\xec\xe1\xd3U\x85\xb1\xdbqhV\x96\x17e\x10" +
	"\xbe\xf1\xb2\x0d\xe0\x84f\xe5v\xce&\xdcl;&\xe1" +
	"\xe9\xbe\xcc\x93*?X\xe7\x9b\x90\xf7\xae\x02$\xe4;" +
	"\\9\xf2\xcd\xa7\x01re\xccX\x93\x01c]\xde\xe1" +
	"\xca\x93\xa3\x0d\x80\x1a\xf2\x16cS\xbep\x03\xa0\x96\xbc" +
	"\xc6\xff\xb5\xe5\xf3\x1b\xc0 \xcb\xcb\xc2\x94\xfd\xb1\xd9\x9c" +
	"E\x83\xa2\xb4&H{q\xb6\x95\xf7\x93<\xca\xb3\x01" +
	"\xff\xce\xca~i\x83\xb1\xa9\x8apb\xf8\x99\x00\x0c\xac" +
	"\x99\xe6\xb6\xbc\xfbV`\xb38\x8b\xfa\xc6\xda\xdcV\xa1" +
	"\x8d\xcb8\x0c\x12\x00\xff\x07\x00\x00\xff\xff]:\xdf\xf7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_fc867d59c4f2e15c,
		Nodes: []uint64{
			0xa92baada7e157478,
			0xd8c4553d6f87c52b,
		},
		Compressed: true,
	})
}
