// source: backendDb.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.MyDatabase.LogDbMsg');
goog.provide('proto.MyDatabase.LogDbMsg.LevelNumber');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MyDatabase.LogDbMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MyDatabase.LogDbMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MyDatabase.LogDbMsg.displayName = 'proto.MyDatabase.LogDbMsg';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MyDatabase.LogDbMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.MyDatabase.LogDbMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MyDatabase.LogDbMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MyDatabase.LogDbMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
timestamp: jspb.Message.getFieldWithDefault(msg, 1, ""),
hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
loggername: jspb.Message.getFieldWithDefault(msg, 3, ""),
module: jspb.Message.getFieldWithDefault(msg, 4, ""),
level: jspb.Message.getFieldWithDefault(msg, 5, 0),
filename: jspb.Message.getFieldWithDefault(msg, 6, ""),
functionname: jspb.Message.getFieldWithDefault(msg, 7, ""),
linenumber: jspb.Message.getFieldWithDefault(msg, 8, ""),
message: jspb.Message.getFieldWithDefault(msg, 9, ""),
pathname: jspb.Message.getFieldWithDefault(msg, 10, ""),
processid: jspb.Message.getFieldWithDefault(msg, 11, ""),
processname: jspb.Message.getFieldWithDefault(msg, 12, ""),
threadid: jspb.Message.getFieldWithDefault(msg, 13, ""),
threadname: jspb.Message.getFieldWithDefault(msg, 14, ""),
servicename: jspb.Message.getFieldWithDefault(msg, 15, ""),
stacktrace: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MyDatabase.LogDbMsg}
 */
proto.MyDatabase.LogDbMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MyDatabase.LogDbMsg;
  return proto.MyDatabase.LogDbMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MyDatabase.LogDbMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MyDatabase.LogDbMsg}
 */
proto.MyDatabase.LogDbMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLoggername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModule(value);
      break;
    case 5:
      var value = /** @type {!proto.MyDatabase.LogDbMsg.LevelNumber} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionname(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinenumber(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPathname(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadname(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicename(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MyDatabase.LogDbMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MyDatabase.LogDbMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MyDatabase.LogDbMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MyDatabase.LogDbMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLoggername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModule();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFunctionname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLinenumber();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getPathname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getProcessid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getProcessname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getThreadid();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getThreadname();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getServicename();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.MyDatabase.LogDbMsg.LevelNumber = {
  UNLOGGABLE: 0,
  NOTSET: 1,
  DEBUG: 2,
  STREAM: 3,
  INFO: 4,
  LOGON: 5,
  LOGOUT: 6,
  TRADE: 7,
  SCHEDULE: 8,
  REPORT: 9,
  WARNING: 10,
  ERROR: 11,
  CRITICAL: 12
};

/**
 * optional string Timestamp = 1;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Hostname = 2;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setHostname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string LoggerName = 3;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getLoggername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setLoggername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Module = 4;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getModule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setModule = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional LevelNumber Level = 5;
 * @return {!proto.MyDatabase.LogDbMsg.LevelNumber}
 */
proto.MyDatabase.LogDbMsg.prototype.getLevel = function() {
  return /** @type {!proto.MyDatabase.LogDbMsg.LevelNumber} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.MyDatabase.LogDbMsg.LevelNumber} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional string Filename = 6;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setFilename = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string FunctionName = 7;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getFunctionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setFunctionname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string LineNumber = 8;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getLinenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setLinenumber = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string Message = 9;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string PathName = 10;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getPathname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setPathname = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string ProcessId = 11;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getProcessid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setProcessid = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string ProcessName = 12;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getProcessname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setProcessname = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string ThreadId = 13;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getThreadid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string ThreadName = 14;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getThreadname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setThreadname = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string ServiceName = 15;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getServicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setServicename = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string StackTrace = 16;
 * @return {string}
 */
proto.MyDatabase.LogDbMsg.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.MyDatabase.LogDbMsg} returns this
 */
proto.MyDatabase.LogDbMsg.prototype.setStacktrace = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


